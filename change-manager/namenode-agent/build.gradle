
configurations.all {
    exclude module: "logback-classic"
    exclude module: "log4j-to-slf4j"
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'commons-logging') {
            details.useTarget "org.apache.logging.log4j:log4j-slf4j18-impl:2.17.2"
        }
    }
}

configurations.testRuntimeClasspath {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'servlet-api') {
            details.useTarget "javax.servlet:javax.servlet-api:3.1.0"
        }
        if (details.requested.name == 'gson') {
            details.useTarget "com.google.code.gson:gson:2.9.0"
        }
        if (details.requested.name == 'log4j-slf4j-impl') {
            details.useTarget "org.apache.logging.log4j:log4j-slf4j18-impl:2.18.0"
        }
    }
}

dependencies {
    implementation 'ai.sapper.cdc:common:1.0-SNAPSHOT'
    implementation 'ai.sapper.cdc:core:1.0-SNAPSHOT'
    implementation 'ai.sapper.cdc:entity:1.0-SNAPSHOT'
    implementation project(':hcdc-common')

    implementation 'org.ehcache:ehcache:3.10.0'
    // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs-client
    implementation 'org.apache.hadoop:hadoop-client:2.10.2'

    // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs
    implementation 'org.apache.hadoop:hadoop-hdfs:2.10.2'

    implementation 'software.amazon.awssdk:s3:2.17.243'

    implementation('org.springframework.boot:spring-boot-starter-web:2.7.2') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
    // https://mvnrepository.com/artifact/jakarta.ws.rs/jakarta.ws.rs-api
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:2.1.6'

    implementation 'com.opencsv:opencsv:5.6'
    //implementation 'org.apache.parquet:parquet-hadoop-bundle:1.12.3'
    implementation 'org.apache.kafka:kafka-clients:3.2.0'
    // https://mvnrepository.com/artifact/org.apache.parquet/parquet-avro
    implementation 'org.apache.parquet:parquet-avro:1.12.3'

    implementation 'io.prometheus:simpleclient:0.16.0'
    implementation 'io.prometheus:simpleclient_log4j2:0.16.0'
    implementation 'io.prometheus:simpleclient_hotspot:0.16.0'
    implementation 'io.prometheus:simpleclient_httpserver:0.16.0'
    implementation 'io.prometheus:simpleclient_pushgateway:0.16.0'

    implementation 'io.micrometer:micrometer-registry-prometheus:1.10.4'

    // https://mvnrepository.com/artifact/com.adobe.testing/s3mock-junit5
    testImplementation 'com.adobe.testing:s3mock-junit5:2.4.13'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    testImplementation 'com.google.code.gson:gson:2.9.0'

}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'ai.sapper.hcdc.agents.namenode.main.SnapshotRunner'
    }
    baseName = 'hadoop-agent-ALL'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


test {
    systemProperty "AGENT_NAME", System.getProperty("AGENT_NAME")
    jvmArgs ('--add-exports=java.base/jdk.internal.ref=ALL-UNNAMED',
            '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac=ALL-UNNAMED',
            '--add-opens=java.base/java.lang=ALL-UNNAMED',
            '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
            '--add-opens=java.base/java.io=ALL-UNNAMED',
            '--add-opens=java.base/java.util=ALL-UNNAMED')
}